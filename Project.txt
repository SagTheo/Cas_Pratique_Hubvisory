Thought process:

-> figuring out how the api works (retrieving names and pictures of actors and movies)
        -> actor: https://api.themoviedb.org/3/person/${personId}?api_key=${apiKey}
        -> actor picture: https://api.themoviedb.org/3/person/${personId}/images?api_key=${apiKey}
        -> movie: https://api.themoviedb.org/3/movie/${movieId}/images?api_key=${apiKey}
        -> movie picture: https://api.themoviedb.org/3/movie/${movieId}?api_key=${apiKey}

-> figuring out a way to build the quizz
        -> ideas:
            Issue#1 --> when app starts, ids of all the actors and movies are retrieved and stored in array
                        --> found a better way:
                            -possible to download all valid ids there:
                                    -http://files.tmdb.org/p/exports/movie_ids_MM_DD_YYYY.json.gz
                                    -http://files.tmdb.org/p/exports/person_ids_MM_DD_YYYY.json.gz
                            - wrote script to retrieve the first 100000 movie and person ids and 
                              place them in an array (see ids folder)
                                    
                            Issue#2 --> for actors: filter out items which "known_for_department" property !== "Acting"
                                                    and "profile_path" !== null
                                        for movies: filter out items which "posters" property is empty(to retrieve picture)
                                                --> need to write node script to filter out movieIds_100000 and personIds_100000 arrays
                                                --> script end up failing when running on huge arrays
                                                        (even after chopping movieIds_100000 and personIds_100000 into arrays of 10000 items long)
                                                        -> solution: -run filtering script on smaller personIds array and movieIds array
                                                                     -make requests to API based on the resulting arrays

            -one id from actors array and one id from movies array are picked randomly
            -question is displayed with actor's name and movie's name based on those ids (along with pictures)
            -user answers yes or no
        Issue# 3 -->server checks answer thanks to the ids
                -> server calls https://api.themoviedb.org/3/person/{person_id}/movie_credits?api_key=<<api_key>>&language=en-US
                -> filters the response to look for the movie id 
                -> if movie id found : correct answer, if not : wrong answer
                -> server sends back yes or no
                -> server response compared to user answer

Issue#4 --> to display score after a game and save it in-between attempts:
                --> use React Context API ?


Issue#5 --> find name for the app (sprint backlog -> Welcome screen)
                                +
                        style the app


Room for improvement:
        #1-use state key for the randomly generated indexes
                => done

        #2-use environment variable for api key
                => done -> installed dotenv package, created .env file, imported 'dotenv/config' in server.js
        
        #3-organise server.js as a REST API
                => done -> data returned by server is an object containing all the info 
                           that needs to be displayed on the screen, reducing the numbers 
                           of calls to the API to 1 instead of 4
        
        #4-make quizz more balanced -> check out 'Popular' section of tmdb
                -> call https://api.themoviedb.org/3/person/popular?api_key=52f72bf521daa8cdd02ef83abfb71e5b&language=en-US&page=1
                -> property "results"
                -> for each object of "results" -> "name" (actor's name)
                                                -> "profile_path" (actor's picture)
                                                -> property "known_for" :
                                                        for each object of "known_for"
                                                        -> "title" (movie's title)
                                                        -> "poster_path" (movie's picture)
                -> to create question :
                        -> generate random id between 0 and 20
                        -> send it to server so that it can pick one element in the "results" property
                        -> same thing for the page requested
                
                -> to check whether answer is valid or not : 
                        -> answer will always be yes, but user doesn't know that !
        
        #5-context: find way to persist the global state
                => done -> set the highscore in the local storage in the updateHighscore function of the context
        
        #6-make Game over page a state rather than a route(user shouldn't be able to access /game_over)
                => done -> used global state to control access to /game_over

        #7-improve response sent by server to check the answer(checking with the label -> bad idea) 
                => done -> used id prop instead of label